//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PathToHost = newPathToHostTable("go_mock_server", "path_to_host", "")

type pathToHostTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	Path      mysql.ColumnString
	HostAlias mysql.ColumnString
	IsActive  mysql.ColumnBool
	CreatedAt mysql.ColumnTimestamp
	UpdatedAt mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PathToHostTable struct {
	pathToHostTable

	NEW pathToHostTable
}

// AS creates new PathToHostTable with assigned alias
func (a PathToHostTable) AS(alias string) *PathToHostTable {
	return newPathToHostTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PathToHostTable with assigned schema name
func (a PathToHostTable) FromSchema(schemaName string) *PathToHostTable {
	return newPathToHostTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PathToHostTable with assigned table prefix
func (a PathToHostTable) WithPrefix(prefix string) *PathToHostTable {
	return newPathToHostTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PathToHostTable with assigned table suffix
func (a PathToHostTable) WithSuffix(suffix string) *PathToHostTable {
	return newPathToHostTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPathToHostTable(schemaName, tableName, alias string) *PathToHostTable {
	return &PathToHostTable{
		pathToHostTable: newPathToHostTableImpl(schemaName, tableName, alias),
		NEW:             newPathToHostTableImpl("", "new", ""),
	}
}

func newPathToHostTableImpl(schemaName, tableName, alias string) pathToHostTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		PathColumn      = mysql.StringColumn("path")
		HostAliasColumn = mysql.StringColumn("host_alias")
		IsActiveColumn  = mysql.BoolColumn("is_active")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		UpdatedAtColumn = mysql.TimestampColumn("updated_at")
		allColumns      = mysql.ColumnList{IDColumn, PathColumn, HostAliasColumn, IsActiveColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = mysql.ColumnList{PathColumn, HostAliasColumn, IsActiveColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return pathToHostTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Path:      PathColumn,
		HostAlias: HostAliasColumn,
		IsActive:  IsActiveColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
