//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Path = newPathTable("go_mock_server", "path", "")

type pathTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	Path        mysql.ColumnString
	DefaultHost mysql.ColumnString
	Description mysql.ColumnString
	IsActive    mysql.ColumnBool
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PathTable struct {
	pathTable

	NEW pathTable
}

// AS creates new PathTable with assigned alias
func (a PathTable) AS(alias string) *PathTable {
	return newPathTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PathTable with assigned schema name
func (a PathTable) FromSchema(schemaName string) *PathTable {
	return newPathTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PathTable with assigned table prefix
func (a PathTable) WithPrefix(prefix string) *PathTable {
	return newPathTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PathTable with assigned table suffix
func (a PathTable) WithSuffix(suffix string) *PathTable {
	return newPathTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPathTable(schemaName, tableName, alias string) *PathTable {
	return &PathTable{
		pathTable: newPathTableImpl(schemaName, tableName, alias),
		NEW:       newPathTableImpl("", "new", ""),
	}
}

func newPathTableImpl(schemaName, tableName, alias string) pathTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		PathColumn        = mysql.StringColumn("path")
		DefaultHostColumn = mysql.StringColumn("default_host")
		DescriptionColumn = mysql.StringColumn("description")
		IsActiveColumn    = mysql.BoolColumn("is_active")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		allColumns        = mysql.ColumnList{IDColumn, PathColumn, DefaultHostColumn, DescriptionColumn, IsActiveColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = mysql.ColumnList{PathColumn, DefaultHostColumn, DescriptionColumn, IsActiveColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return pathTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Path:        PathColumn,
		DefaultHost: DefaultHostColumn,
		Description: DescriptionColumn,
		IsActive:    IsActiveColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
